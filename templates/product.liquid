<div class="row" id="product">
  {% assign current_variant = product.selected_or_first_available_variant %}
  {% assign featured_image = current_variant.featured_image | default: product.featured_image %}

  <div class="col s12 l6 left-container">
    <div class="container-slider">
      <div
        id="product-images"
        style="--swiper-navigation-color: #fff; --swiper-pagination-color: #fff"
        class="swiper"
      >
        <div class="swiper-wrapper">
          <div 
            class="swiper-slide"
            v-for="(media, index) in getProductMedia"
          >
            <img 
              :src="media.src" 
              :alt="media.alt"
            />
          </div>
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
      </div>
      <div id="product-images-thumbnail" thumbsSlider="" class="swiper mySwiper">
        <div class="swiper-wrapper">
          <div 
            class="swiper-slide"
            v-for="(media, index) in getProductMedia"
          >
            <img 
              :src="media.src" 
              :alt="media.alt"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col s12 l6 right-container">
    <div class="container-product">
      <div class="row">
        <div class="col s12">
          <h1 class="title">
            {{ product.title }}
          </h1>
        </div>
      </div>
      <div class="row">
        <div class="col s12">
          <div>
            Estrelas das avaliações....
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col s12">
          <div class="container-product-price">
            <div class="container-compare-price">
              <div class="old-price">
                <span class="from-price">De </span>
                <span class="old-price-value" ref="old_price">
                  R$ 5.000,00
                </span>
              </div>
            </div>
            <div class="container-price">
              <span class="to-price">
                Por
              </span>
              <span class="new-price-value" ref="product_price">
                R$ 0,00
              </span>
            </div>
          </div>
        </div>
      </div>
      <div class="row"><div class="line"></div></div>
      <div class="row">
        <div class="col s12">
          <div class="container-title-options">
            <h3>
              Opções
            </h3>
          </div>
        </div>
        <div class="col s12">
          <div 
            v-for="(option, indexOption) in getProductOptions"
            :key="indexOption" 
            class="container-body-options"
          >
            <div class="options-name">
              ${option.name}
            </div>
            <div class="option-values">
              <select
                :data-option-name="option.name"  
              >
                <option
                  v-for="(value, indexValue) in option.values"
                  :key="indexValue"
                  :value="value"
                  :selected="indexValue == 0"
                >${value}</option>
              </select>
            </div>
          </div>
        </div>
      </div>
      <div class="row"><div class="line"></div></div>
      <div class="row">
        <div class="col s12">
          <div class="container-select-quantity">
            <div class="box-quantity">
              <label>Escolha a Quantidade</label>
              <select id="quantity-select" class="browser-default">
                <option value="1" selected>1 Item</option>
                <option value="2">2 Itens</option>
                <option value="3">3 Itens</option>
                <option value="4">4 Itens</option>
                <option value="5">5 Itens</option>
                <option value="6">6 Itens</option>
                <option value="7">7 Itens</option>
                <option value="8">8 Itens</option>
                <option value="9">9 Itens</option>
                <option value="10">10 Itens</option>
              </select>
            </div>
            <div class="box-add-to-cart">
              <a class="waves-effect waves-light btn-small">Adicionar ao carrinho</a>
            </div>
          </div>
        </div>
        <div class="col s12">
          <div class="container-buy-button">
            <a class="waves-effect waves-light btn-large">Comprar agora</a>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col s12">
          <ul class="collapsible popout">
            <li>
              <div 
                class="collapsible-header"
                >
                  <i class="material-icons">info</i>
                  Descrição
                </div>
                <div ref="product_description" class="collapsible-body">

                </div>
            </li>
            <li>
              <div class="collapsible-header"><i class="material-icons">rate_review</i>Avaliações</div>
              <div class="collapsible-body"><span>Lorem ipsum dolor sit amet.</span></div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>


  <!-- <div class="product-template container">

    <div class="product-images">
      <img 
        src="{{ featured_image | img_url: 'large' }}" 
        alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg"
      >
      {% for image in product.images %}
        <a 
          href="{{ image.src | img_url: 'large' }}"
          >
          <img 
            src="{{ image.src | img_url: 'compact' }}" 
            alt="{{ image.alt | escape }}"
          >
        </a>
      {% endfor %}
    </div>

    <div class="product-description-container">
      <div class="product-title">
        <h1>{{ product.title }}</h1>
      </div>

      <div class="product-cart">
        <form 
          action="/cart/add" 
          method="post" 
          enctype="multipart/form-data" 
          >
            <select name="id" id="productSelect">
              {% for variant in product.variants %}
                {% if variant.available %}
                  <option value="{{ variant.id }}">
                    {{ variant.title }} - {{ variant.price | money_with_currency }}
                  </option>
                {% else %}
                  <option disabled="disabled">
                    {{ variant.title }} - sold out
                  </option>
                {% endif %}
              {% endfor %}
            </select>
            {{ current_variant.price | money }}
            <label for="Quantity">quantity</label>
            <input type="number" id="Quantity" name="quantity" value="1" min="1">
            <button @click="onAddToCart" type="submit" name="add" id="AddToCart">Add to cart</button>
        </form>
      </div>
    </div>

    <ul class="collapsible">
      <li>
        <div class="collapsible-header"><i class="material-icons">add</i>Descrição</div>
        <div class="collapsible-body"><span>Lorem ipsum dolor sit amet.</span></div>
      </li>
      <li>
        <div class="collapsible-header"><i class="material-icons">add</i>Avaliações</div>
        <div class="collapsible-body"><span>Lorem ipsum dolor sit amet.</span></div>
      </li>
    </ul>
  
  </div> -->
</div>

<script type='text/javascript'>
  $(document).ready(function() {

    const { createApp } = Vue
    const {  
      mapActions, 
      mapGetters 
    } = Vuex;

    // const testeComponent = {
    //   template: "<div>${teste}</div>",
    //   delimiters: ['${', '}'],
    //   data: () => ({
    //     teste: 'Isso aqui é um teste'
    //   })
    // };

    // console.log("componentButtonCart", componentButtonCart)
    // console.log("awdadwdauwdhawiudhiuwahduiui")

    createApp({
      // components: {
      //   "componentButtonCart": componentButtonCart,
      // },
      delimiters: ['${', '}'],
      data: () => ({
        header: "Cabeçalho",
        productImageInstance: null,
        productThumbnailImageInstance: null,
        eventShakeBuyButton: null,

        // eventLoop: null,
        // eventTime: 5000,
        // hibernateEventMain: null,
        // hibernateEventThumbnail: null,
        collapsibleEl: null,
        selected: {
          variantID: null,
          options: {},
          quantity: 1,
        },
      }),
      computed: {
        ...mapGetters([
          "getHeader",
          // "getProduct",
          "getProductPrice",
          "getProductMedia",
          "getProductOptions",
          "getProductDescription",
          "getProductVariants",
        ])
      },
      methods: {
        ...mapActions([
          "setProduct",
          "addProductToCart",
          "setCartProducts",
        ]),
        async onAddToCart(event) {
          event.preventDefault();
          console.log("onAddToCart.....")
          // await this.addProductToCart({
          //   variant_id: this.getProduct.variants[0].id,
          //   quantity: 1,
          // })
          // await this.setCartProducts()
        },
        setEventShakeBuyButton() {
          clearInterval(this.eventShakeBuyButton)
          let button = $(".container-buy-button a");
          button.removeClass("shakeX");
          setTimeout(
            () => {
              button.addClass("shakeX");
            },
            50
          )
          this.eventShakeBuyButton = setInterval(
            () => {
              button.removeClass("shakeX");
              setTimeout(
                () => {
                  button.addClass("shakeX");
                },
                50
              )
            },
            3000
          );
        },
        setVariantID() {
          // console.log("this.getProductVariants", this.getProductVariants)
          this.selected.variantID = null;
          let optionsValues = Object.values(this.selected.options);
          let variantTarget = this.getProductVariants.find(
            (variant) => {
              let isDiff = variant.options.some(
                (option) => {
                  return !optionsValues.includes(option);  
                }
              )
              return !isDiff;
            }
          );
          // console.log("variantTarget", variantTarget)
          this.selected.variantID = variantTarget.id;
        },
      },
      async created() {
        await this.setProduct("{{ product.handle }}")
      },
      mounted() {
        this.setEventShakeBuyButton()
        this.collapsibleEl = $(".collapsible")
        this.collapsibleEl.collapsible();

        $(".collapsible li").click(
          function (e) {
            let target = $(this)[0];
            if (target.classList.contains('active')) return;
            let body = target.querySelector(".collapsible-body");
            let fn = setInterval(
              () => {
                if (body.style.display !== 'block') return;
                clearInterval(fn)
                scrollTo(
                  target.offsetTop - navBarHeight,
                  0,
                  150
                )
              }, 100
            );
          }
        )

        // Adicionando o evento no select de quantidade
        let $select = $("#quantity-select");
        this.selected.quantity = parseInt($select.val());
        $select.off('change')
        $select.change(
          (e) => {
            // console.log(e)
            let selectEl = e.target;
            this.selected.quantity = parseInt(selectEl.value);
          }
        )

        // Evento de adicionar no carrinho
        let $button = $('.box-add-to-cart')
        $button.off('click')
        $button.click(
          async (e) => {
            console.log(e)
            await this.addProductToCart({
              variantID:  this.selected.variantID,
              quantity:   this.selected.quantity,
            })

            await this.setCartProducts();
            // let selectEl = e.target;
            // this.selected.quantity = parseInt(selectEl.value);
          }
        )
      },
      watch: {
        getProductPrice(newValue) {
          this.$refs.product_price.innerHTML = formatCurrency(newValue);
        },
        getProductDescription(newValue) {
          this.$refs.product_description.innerHTML = newValue;
          this.$nextTick(
            () => {
              this.collapsibleEl.collapsible('open', 0)
            }
          )
        },
        getProductMedia(newValue) {
          this.$nextTick(
            () => {
              this.productThumbnailImageInstance = new Swiper(
                "#product-images-thumbnail", {
                  spaceBetween: 10,
                  slidesPerView: 4,
                  freeMode: true,
                  watchSlidesProgress: true,
                }
              );
              this.productImageInstance = new Swiper(
                "#product-images", {
                  spaceBetween: 30,
                  centeredSlides: true,
                  autoplay: {
                    delay: 3500,
                    disableOnInteraction: false,
                  },
                  pagination: {
                    el: ".swiper-pagination",
                    clickable: true,
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  thumbs: {
                    swiper: this.productThumbnailImageInstance,
                  },
                },
              );
            }
          )
        },
        getProductOptions(newValue) {
          // Adicionar o evento de mudança de select
          this.$nextTick(
            function () {
              newValue.forEach(
                (option) => {
                  let $select = $(`[data-option-name='${option.name}']`);
                  this.selected.options[option.name] = $select.val();
                  $select.off('change')
                  $select.change(
                    (e) => {
                      // console.log(e)
                      let selectEl = e.target;
                      this.selected.options[selectEl.dataset['optionName']] = selectEl.value;
                      this.setVariantID();
                    }
                  )
                }
              )
              this.setVariantID();
            }
          )
        },
      }
    })
    .use(store)
    .mount("#product")

    // $button.removeClass("animated shake");
    // setTimeout(
    //   function() {
    //     $button.addClass("animated shake");
    //   },
    //   25
    // );

  });
</script>